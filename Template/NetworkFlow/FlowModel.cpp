/*
 * 0. 最小割=最大流
 * 1. 最大权闭合子图=正权点和-最小割
 *    闭合子图就是给定一个有向图，从中选择一些点组成一个点集V。对其中任意一个点，其后续节点都仍然在V中
 *    建立源点s和汇点t，将源点s与所有权值为正的点相连，容量为权值
 *    将所有权值为负的点与汇点t相连，容量为权值的绝对值
 *    权值为0的点不做处理，同时将原来的边容量设置为无穷大
 * 2. 最小路径覆盖(见二分图)
 * 3. 有组合/套餐的最大收益问题转化为最小割问题(luoguP1361)
 * 4. 最小割点，拆点(包括s和t，最后跑s+n到t的最小割)转化为最小割(边)
 * 5. 牛吃饭问题，一头牛有喜欢的饮料列表和食物列表，求最大能满足的牛数
 *    牛拆点，一边连饮料，一边连食物，跑最大流即可
 * 6. 火星探险/深海机器人问题，在一个二维矩阵上走，某些点第一次走到能获得收益，可重复走，求最大收益
 *    如果有多个起点和终点分别连上源汇点，中间拆点，x和x'之间连两条边，<x,x',1,-1>和<x,x',INF,0>
 * 7. 跑多次网络流的情况，如果无需重新建图，也要记住将之前跑的流量重置，可以在Edge结构体里设置一个cap
 *    加边时cap和w相同，重置时枚举所有边使w=cap
 * 8. 输出方案考虑枚举边判断流量，以及在dfs时记录前驱
 * 9. 注意N的大小，注意顶点数(特别是拆点后)，注意s和t，注意网络流中是有向边，反边不等于无向边 
 */  
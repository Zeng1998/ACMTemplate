\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cm}{/*}
\PYG{c+cm}{构造函数}
\PYG{c+cm}{    bitset\PYGZlt{}4\PYGZgt{} bitset1;　　      //无参构造，长度为４，默认每一位为0}
\PYG{c+cm}{    bitset\PYGZlt{}8\PYGZgt{} bitset2(12);　　  //长度为８，二进制保存，前面用0补充}
\PYG{c+cm}{    string s = \PYGZdq{}100101\PYGZdq{};}
\PYG{c+cm}{    bitset\PYGZlt{}10\PYGZgt{} bitset3(s);　　  //长度为10，前面用0补充}
\PYG{c+cm}{    char s2[] = \PYGZdq{}10101\PYGZdq{};}
\PYG{c+cm}{    bitset\PYGZlt{}13\PYGZgt{} bitset4(s2);　　 //长度为13，前面用0补充}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} bitset1 \PYGZlt{}\PYGZlt{} endl;　　//0000}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} bitset2 \PYGZlt{}\PYGZlt{} endl;　　//00001100}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} bitset3 \PYGZlt{}\PYGZlt{} endl;　　//0000100101}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} bitset4 \PYGZlt{}\PYGZlt{} endl;　　//0000000010101}
\PYG{c+cm}{    bitset\PYGZlt{}2\PYGZgt{} bitset1(12);　　//12的二进制为1100，但bitset1的size=2，取**后面**部分，即00}
\PYG{c+cm}{    string s = \PYGZdq{}100101\PYGZdq{};　　}
\PYG{c+cm}{    bitset\PYGZlt{}4\PYGZgt{} bitset2(s);　　//s的size=6，而bitset的size=4，取**前面**部分，即1001}
\PYG{c+cm}{    char s2[] = \PYGZdq{}11101\PYGZdq{};}
\PYG{c+cm}{    bitset\PYGZlt{}4\PYGZgt{} bitset3(s2);　　//与bitset2同理，取前面部分，即1110}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} bitset1 \PYGZlt{}\PYGZlt{} endl;　　//00}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} bitset2 \PYGZlt{}\PYGZlt{} endl;　　//1001}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} bitset3 \PYGZlt{}\PYGZlt{} endl;　　//1110}
\PYG{c+cm}{操作}
\PYG{c+cm}{    bitset\PYGZlt{}4\PYGZgt{} foo (string(\PYGZdq{}1001\PYGZdq{}));}
\PYG{c+cm}{    bitset\PYGZlt{}4\PYGZgt{} bar (string(\PYGZdq{}0011\PYGZdq{}));}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (foo\PYGZca{}=bar) \PYGZlt{}\PYGZlt{} endl;       // 1010 (foo对bar按位异或后赋值给foo)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (foo\PYGZam{}=bar) \PYGZlt{}\PYGZlt{} endl;       // 0010 (按位与后赋值给foo)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (foo|=bar) \PYGZlt{}\PYGZlt{} endl;       // 0011 (按位或后赋值给foo)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (foo\PYGZlt{}\PYGZlt{}=2) \PYGZlt{}\PYGZlt{} endl;        // 1100 (左移２位，低位补0，有自身赋值)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (foo\PYGZgt{}\PYGZgt{}=1) \PYGZlt{}\PYGZlt{} endl;        // 0110 (右移1位，高位补0，有自身赋值)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (\PYGZti{}bar) \PYGZlt{}\PYGZlt{} endl;           // 1100 (按位取反)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (bar\PYGZlt{}\PYGZlt{}1) \PYGZlt{}\PYGZlt{} endl;         // 0110 (左移，不赋值)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (bar\PYGZgt{}\PYGZgt{}1) \PYGZlt{}\PYGZlt{} endl;         // 0001 (右移，不赋值)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (foo==bar) \PYGZlt{}\PYGZlt{} endl;       // false (0110==0011为false)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (foo!=bar) \PYGZlt{}\PYGZlt{} endl;       // true  (0110!=0011为true)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (foo\PYGZam{}bar) \PYGZlt{}\PYGZlt{} endl;        // 0010 (按位与，不赋值)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (foo|bar) \PYGZlt{}\PYGZlt{} endl;        // 0111 (按位或，不赋值)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} (foo\PYGZca{}bar) \PYGZlt{}\PYGZlt{} endl;        // 0101 (按位异或，不赋值)}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo[0] \PYGZlt{}\PYGZlt{} endl;　　        // 1}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo[2] \PYGZlt{}\PYGZlt{} endl;　　        // 0}
\PYG{c+cm}{其他函数}
\PYG{c+cm}{    bitset\PYGZlt{}8\PYGZgt{} foo (\PYGZdq{}10011011\PYGZdq{});}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.count() \PYGZlt{}\PYGZlt{} endl;　　//5　 （count函数用来求bitset中1的位数}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.size() \PYGZlt{}\PYGZlt{} endl;　　 //8　　（size函数用来求bitset的大小，一共有８位}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.test(0) \PYGZlt{}\PYGZlt{} endl;　　//true（test函数用来查下标处的元素是0还是1，并返回}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.any() \PYGZlt{}\PYGZlt{} endl;　　//true　（any函数检查bitset中是否有1}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.none() \PYGZlt{}\PYGZlt{} endl;　　//false（none函数检查bitset中是否没有1}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.all() \PYGZlt{}\PYGZlt{} endl;　　//false　（all函数检查bitset中是全部为1}
\PYG{c+cm}{    bitset\PYGZlt{}8\PYGZgt{} foo (\PYGZdq{}10011011\PYGZdq{});}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.flip(2) \PYGZlt{}\PYGZlt{} endl;　　//10011111（flip函数传参数时，用于将参数位取反}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.flip() \PYGZlt{}\PYGZlt{} endl;　　 //01100000（flip函数不指定参数时，将bitset每一位全部取反}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.set() \PYGZlt{}\PYGZlt{} endl;　　　//11111111（set函数不指定参数时，将bitset的每一位全部置为1}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.set(3,0) \PYGZlt{}\PYGZlt{} endl;　//11110111（set函数指定两位参数时，将一参位置设置为二参}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.set(3) \PYGZlt{}\PYGZlt{} endl;　　 //11111111（set函数只有一个参数时，将参数下标处置为1}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.reset(4) \PYGZlt{}\PYGZlt{} endl;　//11101111（reset函数传一个参数时将参数下标处置为0}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} foo.reset() \PYGZlt{}\PYGZlt{} endl;　　//00000000（reset函数不传参数时将bitset的每一位全部置为0}
\PYG{c+cm}{类型转换}
\PYG{c+cm}{    bitset\PYGZlt{}8\PYGZgt{} foo (\PYGZdq{}10011011\PYGZdq{});}
\PYG{c+cm}{    string s = foo.to\PYGZus{}string();　　          //将bitset转换成string类型}
\PYG{c+cm}{    unsigned long a = foo.to\PYGZus{}ulong();　　    //将bitset转换成unsigned long类型}
\PYG{c+cm}{    unsigned long long b = foo.to\PYGZus{}ullong(); //将bitset转换成unsigned long long类型}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} s \PYGZlt{}\PYGZlt{} endl;　　//10011011}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} a \PYGZlt{}\PYGZlt{} endl;　　//155}
\PYG{c+cm}{    cout \PYGZlt{}\PYGZlt{} b \PYGZlt{}\PYGZlt{} endl;　　//155}
\PYG{c+cm}{*/}
\end{Verbatim}
